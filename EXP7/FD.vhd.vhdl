-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_1 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic;
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_1;

architecture Behavioral of MUX_GATE_BUS_1 is
begin
  with sel select
    p_out <=
      in_0 when '0',
      in_1 when '1',
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity DIG_D_FF_BUS is
  generic (
    Default: integer; 
    Bits: integer );
  port ( D  : in std_logic_vector ((Bits-1) downto 0);
         C  : in std_logic;
         Q  : out std_logic_vector ((Bits-1) downto 0);
         notQ : out std_logic_vector ((Bits-1) downto 0) );
end DIG_D_FF_BUS;

architecture Behavioral of DIG_D_FF_BUS is
   signal state : std_logic_vector ((Bits-1) downto 0) := std_logic_vector(to_unsigned(Default, Bits));
begin
   Q    <= state;
   notQ <= NOT( state );

   process(C)
   begin
      if rising_edge(C) then
        state  <= D;
      end if;
   end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

entity DIG_Add is
  generic ( Bits: integer ); 
  port (
    s: out std_logic_vector((Bits-1) downto 0);
    c_o: out std_logic;
    a: in std_logic_vector((Bits-1) downto 0);
    b: in std_logic_vector((Bits-1) downto 0);
    c_i: in std_logic );
end DIG_Add;

architecture Behavioral of DIG_Add is
   signal temp : std_logic_vector(Bits downto 0);
begin
   temp <= ('0' & a) + b + c_i;

   s    <= temp((Bits-1) downto 0);
   c_o  <= temp(Bits);
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- hex synchronous counter
entity n74163 is
  port (
    notPE: in std_logic;
    notSR: in std_logic;
    CP: in std_logic;
    CET: in std_logic;
    CEP: in std_logic;
    P0: in std_logic;
    P1: in std_logic;
    P2: in std_logic;
    P3: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    TC: out std_logic;
    Q0: out std_logic;
    Q1: out std_logic;
    Q2: out std_logic;
    Q3: out std_logic);
end n74163;

architecture Behavioral of n74163 is
  signal s0: std_logic_vector(3 downto 0);
  signal s1: std_logic_vector(3 downto 0);
  signal s2: std_logic_vector(3 downto 0);
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic_vector(3 downto 0);
  signal s6: std_logic_vector(3 downto 0);
  signal s7: std_logic_vector(3 downto 0);
begin
  s4 <= (CEP AND CET);
  s6(0) <= P0;
  s6(1) <= P1;
  s6(2) <= P2;
  s6(3) <= P3;
  gate0: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 4)
    port map (
      sel => s4,
      in_0 => s1,
      in_1 => s2,
      p_out => s5);
  TC <= (s3 AND CET);
  gate1: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 4)
    port map (
      sel => notPE,
      in_0 => s6,
      in_1 => s5,
      p_out => s7);
  gate2: entity work.MUX_GATE_BUS_1
    generic map (
      Bits => 4)
    port map (
      sel => notSR,
      in_0 => "0000",
      in_1 => s7,
      p_out => s0);
  gate3: entity work.DIG_D_FF_BUS -- Q
    generic map (
      Default => 0,
      Bits => 4)
    port map (
      D => s0,
      C => CP,
      Q => s1);
  gate4: entity work.DIG_Add
    generic map (
      Bits => 4)
    port map (
      a => s1,
      b => "0001",
      c_i => '0',
      s => s2,
      c_o => s3);
  Q0 <= s1(0);
  Q1 <= s1(1);
  Q2 <= s1(2);
  Q3 <= s1(3);
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- 4-bit comparator
entity n7485 is
  port (
    PleQ_i: in std_logic;
    PeqQ_i: in std_logic;
    PgrQ_i: in std_logic;
    P_0: in std_logic;
    P_1: in std_logic;
    P_2: in std_logic;
    P_3: in std_logic;
    Q_0: in std_logic;
    Q_1: in std_logic;
    Q_2: in std_logic;
    Q_3: in std_logic;
    VCC: in std_logic;
    GND: in std_logic;
    PleQ: out std_logic;
    PeqQ: out std_logic;
    PgrQ: out std_logic);
end n7485;

architecture Behavioral of n7485 is
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal s7: std_logic;
begin
  s0 <= NOT (P_0 AND Q_0);
  s2 <= NOT (P_1 AND Q_1);
  s4 <= NOT (P_2 AND Q_2);
  s6 <= NOT (P_3 AND Q_3);
  s1 <= NOT ((P_0 AND s0) OR (s0 AND Q_0));
  s3 <= NOT ((P_1 AND s2) OR (s2 AND Q_1));
  s5 <= NOT ((P_2 AND s4) OR (s4 AND Q_2));
  s7 <= NOT ((P_3 AND s6) OR (s6 AND Q_3));
  PgrQ <= (NOT (Q_3 AND s6) AND NOT (Q_2 AND s4 AND s7) AND NOT (Q_1 AND s2 AND s7 AND s5) AND NOT (Q_0 AND s0 AND s7 AND s5 AND s3) AND NOT (s7 AND s5 AND s3 AND s1 AND PleQ_i) AND NOT (s7 AND s5 AND s3 AND s1 AND PeqQ_i));
  PeqQ <= (s7 AND s5 AND PeqQ_i AND s3 AND s1);
  PleQ <= (NOT (PeqQ_i AND s1 AND s3 AND s5 AND s7) AND NOT (PgrQ_i AND s1 AND s5 AND s3 AND s7) AND NOT (s3 AND s5 AND s7 AND s0 AND P_0) AND NOT (s5 AND s7 AND s2 AND P_1) AND NOT (s7 AND s4 AND P_2) AND NOT (s6 AND P_3));
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity FD  is
  port (
    conta_quant: in std_logic;
    conta_prod: in std_logic;
    Clock: in std_logic;
    Quantidade: in std_logic_vector(3 downto 0);
    Produ_o: in std_logic_vector(3 downto 0);
    zera_quant: in std_logic;
    zera_prod: in std_logic;
    Igual_Quant: out std_logic;
    Igual_Prod: out std_logic);
end FD;

architecture Behavioral of FD is
  signal s0: std_logic;
  signal s1: std_logic;
  signal s2: std_logic;
  signal s3: std_logic;
  signal s4: std_logic;
  signal s5: std_logic;
  signal s6: std_logic;
  signal s7: std_logic;
  signal s8: std_logic;
  signal s9: std_logic;
  signal s10: std_logic;
  signal s11: std_logic;
  signal s12: std_logic;
  signal s13: std_logic;
  signal s14: std_logic;
  signal s15: std_logic;
  signal s16: std_logic;
  signal s17: std_logic;
begin
  s5 <= NOT zera_prod;
  s0 <= NOT zera_quant;
  s10 <= Quantidade(0);
  s11 <= Quantidade(1);
  s12 <= Quantidade(2);
  s13 <= Quantidade(3);
  s14 <= Produ_o(0);
  s15 <= Produ_o(1);
  s16 <= Produ_o(2);
  s17 <= Produ_o(3);
  gate0: entity work.n74163
    port map (
      notSR => s0,
      CP => Clock,
      P0 => '0',
      P1 => '0',
      P2 => '0',
      P3 => '0',
      CEP => conta_quant,
      GND => '0',
      notPE => '1',
      CET => conta_quant,
      VCC => '1',
      Q3 => s1,
      Q2 => s2,
      Q1 => s3,
      Q0 => s4);
  gate1: entity work.n74163
    port map (
      notSR => s5,
      CP => Clock,
      P0 => '0',
      P1 => '0',
      P2 => '0',
      P3 => '0',
      CEP => conta_prod,
      GND => '0',
      notPE => '1',
      CET => conta_prod,
      VCC => '1',
      Q3 => s6,
      Q2 => s7,
      Q1 => s8,
      Q0 => s9);
  gate2: entity work.n7485
    port map (
      PleQ_i => '0',
      PeqQ_i => '1',
      PgrQ_i => '0',
      P_0 => s10,
      P_1 => s11,
      P_2 => s12,
      P_3 => s13,
      Q_0 => s4,
      Q_1 => s3,
      Q_2 => s2,
      Q_3 => s1,
      VCC => '1',
      GND => '0',
      PeqQ => Igual_Quant);
  gate3: entity work.n7485
    port map (
      PleQ_i => '0',
      PeqQ_i => '1',
      PgrQ_i => '0',
      P_0 => s14,
      P_1 => s15,
      P_2 => s16,
      P_3 => s17,
      Q_0 => s9,
      Q_1 => s8,
      Q_2 => s7,
      Q_3 => s6,
      VCC => '1',
      GND => '0',
      PeqQ => Igual_Prod);
end Behavioral;
